/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./specialcol/header/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./specialcol/header/components/header.js":
/*!************************************************!*\
  !*** ./specialcol/header/components/header.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var onWheel = __webpack_require__(/*! ./../utils/onWheel */ "./specialcol/header/utils/onWheel.js");

!function ($) {

    if (!$.fn.scrollUnique) {
        $.fn.scrollUnique = function () {
            return $(this).each(function () {
                var eventType = 'mousewheel';
                if (document.mozHidden !== undefined) {
                    eventType = 'DOMMouseScroll';
                }
                $(this).on(eventType, function (event) {
                    var scrollTop = this.scrollTop,
                        scrollHeight = this.scrollHeight,
                        height = this.clientHeight;
                    var delta = (event.originalEvent.wheelDelta) ? event.originalEvent.wheelDelta : -(event.originalEvent.detail || 0);
                    delta = delta / 5;
                    if ((delta > 0 && scrollTop <= delta) || (delta < 0 && scrollHeight - height - scrollTop <= -1 * delta)) {
                        this.scrollTop = delta > 0 ? 0 : scrollHeight;
                        event.preventDefault();
                    }
                });
            });
        };
    }

    $(document).ready(function () {
        // tansitionEnd事件名称获取
        var transitionEnd = function () {
            var el = document.createElement('div');

            var transEndEventNames = {
                transition: 'transitionend',
                WebkitTransition: 'webkitTransitionEnd',
                MozTransition: 'transitionend',
                OTransition: 'oTransitionEnd otransitionend',
            };

            for (var name in transEndEventNames) {
                if (el.style[name] !== undefined) {
                    return transEndEventNames[name];
                }
            }

            return false; // explicit for ie8 (  ._.)
        }();

        /* 阻止鼠标滚轮事件冒泡方法 */

        /* 函数防抖 */
        var debounce = function (defaultTime) {
            var timeoutIndex;
            return function (callback, time) {
                if (typeof time !== 'number') {
                    time = defaultTime;
                }
                if (typeof timeoutIndex === 'number') {
                    clearTimeout(timeoutIndex);
                }

                timeoutIndex = setTimeout(callback, time);
            };
        };

        // 鼠标轨迹记录，计算移动角度
        var mouseLocus = [];
        var MOUSE_LOCUS_LENGTH = 3;

        for (var i = 0; i < MOUSE_LOCUS_LENGTH; i++) {
            mouseLocus.push({x: 0, y: 0,});
        }

        $(document).mousemove(function (e) {
            var mousePoint = {
                x: e.pageX,
                y: e.pageY,
            };

            // if(mouseLocus.length === 0) {
            //     for(var i = 0; i < MOUSE_LOCUS_LENGTH; i++) {
            //         mouseLocus.push(mousePoint);
            //     }
            // }

            mouseLocus.push(mousePoint);

            if (mouseLocus.length > MOUSE_LOCUS_LENGTH) {
                mouseLocus.shift();
            }
        });

        // 获取方向角
        var getDirectionAngle = function (startX, startY, endX, endY) {
            var diffY = endY - startY,
                diffX = endX - startX,
                angle = Math.atan(diffY / diffX) / Math.PI * 180;

            if (diffX < 0 && diffY > 0) {
                angle = 180 + angle;
            } else if (diffX < 0 && diffY < 0) {
                angle = angle - 180;
            }

            return angle;
        };

        // 获取鼠标移动角度
        var getMoveAngle = function () {
            var startPoint = mouseLocus[0],
                endPoint = mouseLocus[mouseLocus.length - 1];

            if (!startPoint) {
                return 0;
            }

            return getDirectionAngle(startPoint.x, startPoint.y, endPoint.x, endPoint.y);
        };

        /* 主菜单“更多”的显示 */
        var $header = $('#header');
        var $nav = $header.find('.header-nav');
        var $navItems = $nav.find('>ul>li');
        var $navItems_notMore = $navItems.not('.header-nav-item-more');
        var $navItemMore = $navItems.filter('.header-nav-item-more');

        $(window).resize(function () {
            resetMainMenu();
        });

        resetMainMenu();

        function resetMainMenu() {
            $nav.removeClass('overflow-visible');
            $navItems_notMore.removeClass('header-nav-item-hide');
            $navItemMore.addClass('header-nav-item-hide');

            if ($nav.height() >= $nav[0].scrollHeight) {
                return;
            }

            // 有菜单隐藏的情况
            $navItemMore.removeClass('header-nav-item-hide');

            hideLastNavItem($navItems_notMore);

            function hideLastNavItem($navItems_notMore) {
                if ($navItems_notMore.length === 0) return;

                $navItems_notMore.last().addClass('header-nav-item-hide');
                if ($nav.height() < $nav[0].scrollHeight) {
                    hideLastNavItem($navItems_notMore.not(':last'));
                }
            }

            $nav.addClass('overflow-visible');
        }

        /* 导航广告 */
        $('.J-header-ad').each(function () {
            var $this = $(this);
            var adSrc = $this.attr('data-ad-src');

            if (adSrc) {
                $this.load(adSrc + ' .header-ad-inner', function (response, state) {
                    if (state === 'success' && response.indexOf('header-ad-inner') !== -1) {
                        $this.addClass('load-ad');
                        resetMainMenu();
                    }
                });
            }
        });

        var DELAY_NAV = 300;
        var LOW_DELAY_NAV = 150;
        var mainNavDebounce = debounce(DELAY_NAV);// 主导航菜单防抖
        var $headerDrop = $('.header-dropdown');
        var $headerDropList = $('.header-dropdown-list');
        var $headerDropItem = $headerDropList.children();

        // 获取主菜单延时角度范围
        var getDelayAngleRange_nav = function (startX, startY) {
            var $showDrop = $headerDropItem.filter('.show');

            if ($showDrop.length === 0) {
                return {
                    min: 90,
                    max: 90,
                };
            }

            var margin = 0, // 下拉内容边界安全裕量
                offset = $showDrop.offset(),
                left = offset.left - margin,
                top = offset.top,
                right = offset.left + $showDrop.outerWidth() + margin,

                leftTopPoint = {
                    x: left,
                    y: top,
                },
                rightTopPoint = {
                    x: right,
                    y: top,
                },
                directionAngle_leftTop = getDirectionAngle(startX, startY, leftTopPoint.x, leftTopPoint.y),
                directionAngle_rightTop = getDirectionAngle(startX, startY, rightTopPoint.x, rightTopPoint.y);

            return {
                min: directionAngle_rightTop,
                max: directionAngle_leftTop,
            };
        };


        /*
         * 主菜单hover切换下拉菜单，并触发下拉菜单的自定义事件
         * 下拉菜单（.header-dropdown-list>li）切换消失前后分别触发“beforehide”和“afterhide”事件
         * 下拉菜单切换显示前后分别触发“beforeshow”和“aftershow”事件
         */

        var setDropItemState = function ($drop, state) {
            if (state !== 'show' && state !== 'hide') return;

            var isShow = state === 'show';
            var eventFix = isShow ? 'show' : 'hide';

            $drop.triggerHandler('before' + eventFix);
            $drop.toggleClass('show', isShow);
            $drop.triggerHandler('after' + eventFix);
        };

        var tabDropItem = function ($drop) {
            if ($drop.hasClass('show')) return;

            var $drop_close = $headerDropItem.siblings('.show');

            setDropItemState($drop_close, 'hide');
            setDropItemState($drop, 'show');
        };


        /**
         * 主菜单下拉菜单的显示和隐藏
         * 下拉菜单（.header-dropdown）触发事件：beforehide, beginhide, afterhide, beforeshow, beginshow, aftershow
         */
        var $dropClose = $('.J-drop-close');
        var setDropState = function (state) {
            var dropDuration = 350;

            if (state === 'show') {
                if ($header.hasClass('show-dropdown') && !$headerDropList.hasClass('hiding')) return;

                $headerDrop.triggerHandler('beforeshow');
                $header.addClass('show-dropdown');
                $headerDropList.height(0).addClass('expanding show-text');

                setTimeout(function () {
                    var innerHeight = $headerDropList.children('.show').outerHeight();

                    $headerDropList.height(innerHeight);
                    $headerDrop.triggerHandler('beginshow');

                    var called = false;
                    $headerDropList.one(transitionEnd, function () {
                        called = true;
                        $(this).removeClass('expanding').height('');
                        $headerDrop.triggerHandler('aftershow');
                    });

                    setTimeout(function () {
                        if (!called) {
                            $headerDropList.trigger(transitionEnd);
                        }
                    }, dropDuration);
                }, 0);

            } else if (state === 'hide') {
                if (!$header.hasClass('show-dropdown')) return;

                $headerDrop.triggerHandler('beforehide');

                var innerHeight = $headerDropList.children('.show').outerHeight();
                $headerDropList.removeClass('show-text').height(innerHeight);

                setTimeout(function () {
                    $headerDropList.height(0).addClass('hiding');
                    $headerDrop.triggerHandler('beginhide');

                    var called = false;
                    $headerDropList.one(transitionEnd, function () {
                        called = true;
                        setDropItemState($headerDropItem.filter('.show'), 'hide');
                        $header.removeClass('show-dropdown');
                        $headerDropList.removeClass('hiding');
                        $headerDrop.triggerHandler('afterhide');
                    });

                    setTimeout(function () {
                        if (!called) {
                            $headerDropList.trigger(transitionEnd);
                        }
                    }, dropDuration);
                }, 0);
            }
        };

        var isMouseOnElement = function (event, element) {
            var left = event.clientX,
                top = event.clientY;
            var elementRect = element.getBoundingClientRect() || {};
            var el_start = {
                    left: elementRect.left,
                    top: elementRect.top,
                },
                el_end = {
                    left: elementRect.left + elementRect.width,
                    top: elementRect.top + elementRect.height,
                };

            return left >= el_start.left && left <= el_end.left && top >= el_start.top && top <= el_end.top;
        };

        $headerDropItem.hover(function () {
            $(this).addClass('hover');
        }, function (e) {
            var $this = $(this);
            if (isMouseOnElement(e, this)) return;

            $this.removeClass('hover');
            setTimeout(function () {
                if (!$nav.hasClass('item-hover')) {
                    setDropState('hide');
                }
            }, 0);
        });

        $dropClose.on('click', function () {
            setDropState('hide');
        });

        var $navLine = $('.header-nav-hover-line');
        // 设置主导航下划线方法
        var setNavLine = {
            // 按对应菜单激活下划线
            active: function ($activeNavItem) {
                if ($activeNavItem.length === 0 || !$activeNavItem.is(':visible')) {
                    this.fold();
                    return;
                }
                var left = $activeNavItem.position().left;
                var width = $activeNavItem.width();

                // $activeNavItem.addClass('active').siblings().removeClass('active');

                $navLine.css({
                    left: left,
                    width: width,
                });
            },
            // 折叠下划线
            fold: function () {
                $navLine.css({
                    width: 0,
                });
            },
            // 复位下划线
            reset: (function () {
                var host = location.host,
                    site = host.split('.')[0],
                    pathname = location.pathname.split(/[/.]/)[1], // 服务公告url用“.”分割目录，如 /notice.beian.html
                    url = host + location.pathname,
                    // site = 'www',
                    // pathname = 'product',
                    // url = 'www.huaweicloud.com/product/',
                    mainNavMap = {
                        pathnameMatch: {
                            'product': 'product',
                            'solution': 'solution',
                            'partners': 'partner',
                            'ei': 'ei',
                            'notice': 'support',
                        },
                        siteMatch: {
                            'activity': 'activity',
                            'support': 'support',
                        },
                    },
                    activeNav = '';
					// Joey begin
if(host != "developer.huaweicloud.com"){  
                if (activeNav === '') {
                    $navItems_notMore.each(function () {
                        var $this = $(this);
                        var $href = $this.find('a');
                        var menuUrl = $href.attr('data-href') ? $href.attr('data-href').replace(/(http:|https:|\/\/)/g, '') : ($href.attr('href') ? $href.attr('href').replace(/(http:|https:|\/\/)/g, '') : '');

                        if (url === menuUrl) {
                            activeNav = $this.attr('data-key');
                            return false;
                        }

                    });
                }

                if (activeNav === '' && !(site === 'www' && location.pathname === '/')) { // 若不是www站点首页
                    // 用url匹配导航上的链接来匹配当前页面所属导航
                    $headerDropItem.not('.header-dropdown-more').each(function () {
                        var $this = $(this);
                        var htmlStr = $this.html();

                        if (htmlStr.indexOf(url) !== -1) {
                            activeNav = $this.attr('data-name');
                            return activeNav === 'product';
                        }
                    });
                }

                if (activeNav === '') {
                    // 用手工映射表匹配当前页面所属导航
                    if (site === 'www') {
                        activeNav = mainNavMap.pathnameMatch[pathname] || '';

                    } else {
                        activeNav = mainNavMap.siteMatch[site] || '';
                    }
                }
}
                if (!activeNav) return function () {
                    this.fold();
                };

                var $activeNavItem = $header.find('[data-key="' + activeNav + '"]');

                return function () {
                    this.active($activeNavItem);
                };
            }()),
        };

        setNavLine.reset();
        $(window).resize(function () {
            setNavLine.reset();
        });

        var dropLastState = 'hide';

        $navItems.mouseleave(function () {
            var $this = $(this);
            var $dropdowns_show = $headerDropItem.filter('.show');

            $this.removeClass('hover');
            $nav.removeClass('item-hover');

            dropLastState = 'hide';
            mainNavDebounce(function () {
                if ($dropdowns_show.hasClass('hover') || $nav.hasClass('item-hover')) {
                    return;
                }

                if (!$header.hasClass('show-dropdown')) {
                    setNavLine.reset();
                }
                setDropState('hide');
            }, 200);
        }).mousemove(function () {
            var $this = $(this);
            var moveAngle = getMoveAngle();
            var delayAngleRange = getDelayAngleRange_nav(mouseLocus[mouseLocus.length - 1].x, mouseLocus[mouseLocus.length - 1].y);
            var delay = (moveAngle <= delayAngleRange.max && moveAngle >= delayAngleRange.min) ? DELAY_NAV : LOW_DELAY_NAV;

            $this.addClass('hover');
            $nav.addClass('item-hover');

            setNavLine.active($this);
            dropLastState = 'show';

            mainNavDebounce(function () {
                var index = $this.attr('data-key');
                var $targetDropdown = $headerDropItem.filter('[data-name="' + index + '"]');
                $this.addClass('active').siblings().removeClass('active');
                tabDropItem($targetDropdown);
                setDropState('show');
            }, delay);
        });

        $headerDrop
            .on('beginhide', function () {
                setNavLine.fold();
            })
            .on('afterhide', function () {
                if ($navItems_notMore.filter('.hover').length === 0) {
                    setNavLine.reset();
                }
            })
            .on('mousemove', function (e) {
                var $target = $(e.target);

                if ($target.closest('.header-dropdown-list').length === 0 && !$headerDropList.hasClass('hiding')) {
                    setDropState('hide');
                }
            });

        // 鼠标进入下拉菜单时用空函数取消主导航菜单的触发
        $headerDropList.hover(function () {
            setNavLine.active($navItems.filter('.active'));
            mainNavDebounce(function () {
            });
        }, function () {

        });

        /* “更多”下拉的菜单显示逻辑 */
        $headerDropList.children('[data-name="more"]').on('beforeshow', function () {
            var $headerDropMore = $('.header-dropdown-more');
            var $headerMoreItems = $headerDropMore.find('>ul>li');
            var left = $('.header-nav-item-more').offset().left;

            // 设置显示位置
            $headerDropMore.css('margin-left', left);

            // 显示项目
            $headerMoreItems.addClass('header-more-item-hide');

            $navItems.filter('.header-nav-item-hide').each(function () {
                var index = $(this).attr('data-key');
                $headerMoreItems.filter('[data-key="' + index + '"]').removeClass('header-more-item-hide');
            });

        });

        /* 产品下拉菜单文字溢出时隐藏“new”和“beta”标签 */
        var $dropProduct = $('.header-dropdown-product');
        var $products = $dropProduct.find('dt>a>span,dd>a>span');

        $dropProduct.on('aftershow', function () {
            $products.each(function () {
                var $this = $(this);
                var $tag = $this.nextAll('.new,.beta');
                $tag.toggleClass('hide', $this.width() < this.scrollWidth);
            });
        });

        /* 解决方案下拉菜单三级解决方案列表溢出时隐藏 */
        var $dropSolution = $('.header-dropdown-solution');
        var $subSolutionList = $dropSolution.find('.dropdown-solution-sub');

        $dropSolution.on('aftershow', function () {
            $subSolutionList.each(function () {
                var $this = $(this);
                var $children = $this.children().not('.header-icon-double-arrow-right');
                $children.removeClass('hide');

                if ($this.height() >= this.scrollHeight - 1) return;


                var hideOverflowChild = function (children) {
                    if (children.length === 0) return;

                    children.last().addClass('hide');

                    if ($this.height() < $this[0].scrollHeight - 1) {
                        hideOverflowChild(children.not(':last'));
                    }
                };

                hideOverflowChild($children);
            });
        });

        /*
         * 导航条menu按钮hover显示“所有导航”， 并触发“所有导航”自定义事件
         * “所有导航”显示前后分别触发'beforeshow'和'aftershow'事件
         * “所有导航”隐藏前后分别触发'beforehide'和'afterhide'事件
         */

        var DELAY_ALLNAV = 300; // 鼠标进入次级菜单的反应延时
        var LOW_DELAY_ALLNAV = 0; // 鼠标同级菜单内移动的反应延时
        var $headerMenu = $('.header-menu');
        var $allNav = $('.header-allnav');
        var $allNavWrapper = $allNav.children();

        // allnav导航防抖
        var allNavDebounce = debounce(DELAY_ALLNAV);

        var setAllNavState = function (state) {
            if (state !== 'show' && state !== 'hide') return;

            var isShow = state === 'show';
            var eventFix = isShow ? 'show' : 'hide';

            $allNav.triggerHandler('before' + eventFix);
            $header.toggleClass('show-allnav', isShow);
            $allNav.toggleClass('show', isShow);
            $allNav.triggerHandler('after' + eventFix);
        };

        $allNavWrapper.hover(function () {
            $(this).addClass('hover');
        }, function () {
            $(this).removeClass('hover');
        });

        // 获取allnav导航需要延时的角度范围
        var getDelayAngleRange_allnav = function (startX, startY, $targetNav) {
            if (!$targetNav.is(':visible')) {
                return {
                    min: 0,
                    max: 0,
                };
            }

            var margin = 30, // 次级菜单边界安全裕量
                navOffset = $targetNav.offset(),
                navHeight = $targetNav.outerHeight(),
                left = navOffset.left,
                top = navOffset.top - margin,
                bottom = navOffset.top + navHeight + margin,
                leftTopPoint = {
                    x: left,
                    y: top,
                },
                leftBottomPoint = {
                    x: left,
                    y: bottom,
                },
                directionAngle_leftTop = getDirectionAngle(startX, startY, leftTopPoint.x, leftTopPoint.y),
                directionAngle_leftBottom = getDirectionAngle(startX, startY, leftBottomPoint.x, leftBottomPoint.y);

            return {
                min: directionAngle_leftTop,
                max: directionAngle_leftBottom,
            };
        };

        var inDelayAngleRange_allnav = function ($targetNav) {
            var moveAngle = getMoveAngle();
            var delayAngleRange = getDelayAngleRange_allnav(mouseLocus[mouseLocus.length - 1].x, mouseLocus[mouseLocus.length - 1].y, $targetNav);

            // 如果鼠标移动目标为次级菜单则使用高延时反应时间
            return moveAngle <= delayAngleRange.max && moveAngle >= delayAngleRange.min;
        };

        /*
         * allnav导航菜单hover展开子级导航，切换子级菜单内容，并触发子级导航及子级导航内容的自定义事件
         * 子级导航展开前后分别触发'beforeshow'和'aftershow'
         * 子级导航内容显示前后分别触发'beforeshow'和'aftershow'事件
         * 子级导航内容隐藏前后分别触发'beforehide'和'afterhide'事件
         */
        var $allnavLevel = $('.header-allnav-level');
        var $allnavInner = $allnavLevel.find('.header-allnav-inner');
        var $allnavList = $allnavInner.find('.header-allnav-common-list, [data-define="allnav-list"]');
        var $allnavItem = $allnavList.find('.header-allnav-common-item, .header-allnav-common-split, [data-define="allnav-item"]');


        // 设置层级导航显示隐藏的状态
        var setLevelnavState = function ($el, state) {
            var setState = function ($el, state) {
                if (state !== 'show' && state !== 'hide') return;
                var duration = 300;
                var isShow = state === 'show';
                var eventFix = isShow ? 'show' : 'hide';
                $el.triggerHandler('before' + eventFix);
                $el.addClass('sliding');

                setTimeout(function () {
                    $el.toggleClass('show', isShow);
                    var called = false;

                    $el.one(transitionEnd, function () {
                        called = true;
                        $el.removeClass('sliding');
                        $el.triggerHandler('after' + eventFix);
                    });

                    setTimeout(function () {
                        if (!called) {
                            $el.trigger(transitionEnd);
                        }
                    }, duration);
                }, 0);
            };

            var setStateStrategy = {};

            setStateStrategy.show = function () {
                setState($el, 'show');
            };

            setStateStrategy.hide = function () {
                var $willHideLevel = $el.add($el.nextAll('.header-allnav-level.show'));
                var $lastShowLevel = $willHideLevel.last();
                var willHideNumber = $willHideLevel.length;

                // 去除菜单项激活效果
                $willHideLevel.find('.header-allnav-common-item,[data-define="allnav-item"]').removeClass('active');

                // 从后往前依次隐藏层级菜单
                setState($lastShowLevel, 'hide');

                $willHideLevel.one('afterhide', function () {
                    willHideNumber--;

                    if (willHideNumber <= 0) return;

                    $lastShowLevel = $lastShowLevel.prev('.header-allnav-level');

                    setState($lastShowLevel, 'hide');
                });
            };

            setStateStrategy[state]();
        };

        // 为层级导航，导航菜单列表，导航菜单对应的dom添加和删除.hover来标识当前鼠标经过的位置。
        $allnavLevel.add($allnavList).add($allnavItem)
            .hover(function () {
                var $this = $(this);

                $this.addClass('hover');
            }, function () {
                var $this = $(this);

                $this.removeClass('hover');
            });

        // 导航内菜单项鼠标移入移出
        $allnavItem.hover(function (e) {
            var $this = $(this);
            var index = $this.attr('data-key');
            var $thisNav = $this.closest('.header-allnav-level');
            var $targetNav = $thisNav.next('.header-allnav-level');
            var $targetInner = $targetNav.find('.header-allnav-inner[data-name="' + index + '"]');
            var $currentTargetNavInner = $targetNav.find('.header-allnav-inner.show');

            // 如果鼠标移动目标为次级菜单则使用高延时反应时间
            var delay = $currentTargetNavInner.length > 0 && inDelayAngleRange_allnav($targetNav) ? DELAY_ALLNAV : LOW_DELAY_ALLNAV;

            if ($thisNav.hasClass('sliding')) {
                return;
            }

            allNavDebounce(function () {
                $this.siblings().removeClass('active');
                $this.addClass('active');
                if ($targetInner.length === 0) {
                    if ($targetNav.hasClass('show')) {
                        setLevelnavState($targetNav, 'hide');
                    }

                    return;
                }

                var $hideSibling = $targetInner.siblings('.show');

                // 子级导航显示
                if (!$targetNav.hasClass('show')) {
                    setLevelnavState($targetNav, 'show');
                }

                // 子级导航内容切换（隐藏）
                if ($hideSibling.hasClass('show')) {
                    setLevelnavState($hideSibling, 'hide');
                }

                // 子级导航内容切换（显示）
                if (!$targetInner.hasClass('show')) {
                    setLevelnavState($targetInner, 'show');
                }
            }, delay);

        }, function () {
        });

        // 导航菜单列表鼠标移入移出
        $allnavList.hover(function () {

        }, function () {
            // 鼠标移出本级导航内容区，但还在本级导航内的时候隐藏下一级菜单，消除本级菜单项的激活效果
            var $this = $(this);
            var $thisNav = $this.closest('.header-allnav-level');
            var $targetNav = $thisNav.next('.header-allnav-level');
            var $activeItem = $thisNav.find('.header-allnav-common-item, [data-define="allnav-item"]').filter('.active');
            var delay = inDelayAngleRange_allnav($targetNav) ? DELAY_ALLNAV : LOW_DELAY_ALLNAV;

            allNavDebounce(function () {
                if ($thisNav.hasClass('hover')) {
                    if ($targetNav.hasClass('show')) {
                        setLevelnavState($targetNav, 'hide');
                    }

                    $activeItem.removeClass('active');
                }
            }, delay);
        });

        // 菜单按钮移入显示整个下拉菜单，移出隐藏第一级菜单
        var allnavLevel1 = $('.header-allnav-level1');
        var allnavLevel2 = $('.header-allnav-level2');

        // 某些情况下鼠标进入菜单按钮会莫名依次触发"mouseenter-mouseleave-mouseenter"事件，需添加防抖
        var menuDebounce = debounce(100);
        $headerMenu.hover(function () {
            $(this).addClass('hover');
            menuDebounce(function () {
                setAllNavState('show');
            });

        }, function () {
            $(this).removeClass('hover');
            menuDebounce(function () {
                if (!$allNavWrapper.hasClass('hover')) {
                    setLevelnavState(allnavLevel1, 'hide');
                }
            });
        });

        // 整个下拉导航显示后显示第一级导航, 第一级导航隐藏后隐藏整个下拉导航
        $allNav.on('aftershow', function () {
            // 因为菜单移出隐藏一级菜单的函数使用了setTimeout, 这里也使用setTimeout保证显示函数能隐藏函数之后执行
            setTimeout(function () {
                setLevelnavState(allnavLevel1, 'show');
            }, 0);
        });

        allnavLevel1.on('afterhide', function () {
            if (!$headerMenu.hasClass('hover')) {
                setAllNavState('hide');
            }
        });

        // 层级导航鼠标移入移出
        $allnavLevel.hover(function () {
            var $this = $(this);
            var $next = $this.next();
            var $item = $this.find('.header-allnav-common-item,[data-define="allnav-item"]');
            var $activeItem = $item.filter('.active');

            // 本级导航鼠标移入时，如果没有放在导航内容上，下一级导航需隐藏
            if (!$this.find('.header-allnav-common-list, [data-define="allnav-list"]').filter(':visible').hasClass('hover') && $next.hasClass('show')) {
                setLevelnavState($next, 'hide');
                $activeItem.removeClass('active');
            }
        }, function () {
        });

        // 鼠标移出导航（且未放在menu上）收起整个导航 否则收起2级导航
        var DELAY_ALLNAV_WRAPPER = 300;
        var $allnavWrapper = $('.header-allnav-wrapper');
        var allNavWrapperDebounce = debounce(DELAY_ALLNAV_WRAPPER);

        $allnavWrapper.hover(function () {
            allNavWrapperDebounce(function () {
            }, 0);
        }, function () {
            var $this = $(this);

            allNavWrapperDebounce(function () {
                /* 鼠标移出导航（且未放在menu上）收起整个导航 否则收起2级导航 */
                var activeNavItem = $this.find('.header-allnav-common-item,[data-define="allnav-item"]').filter('.active');
                activeNavItem.removeClass('active');
                if ($allnavLevel.filter('.hover').length === 0 && !$headerMenu.hasClass('hover')) {
                    setLevelnavState(allnavLevel1, 'hide');
                } else {
                    setLevelnavState(allnavLevel2, 'hide');
                }
            });
        });

        // 导航显示前清除选中项
        $allnavLevel.on('beforeshow', function () {
            var $this = $(this);
            $this.find('.header-allnav-common-item,[data-define="allnav-item"]').removeClass('active');
        });

        // 本级导航内容隐藏前隐藏下一级导航
        $allnavInner.on('beforehide', function () {
            var $this = $(this);
            var $next = $this.closest('.header-allnav-level').next();

            if ($next.length === 0 || !$next.hasClass('show')) return;

            setLevelnavState($next, 'hide');
        });

        // 导航显示前清除选中项
        $allnavLevel.children().on('beforeshow', function () {
            $(this).find('.header-allnav-common-item,[data-define="allnav-item"]').removeClass('active');
        });

        // 三级导航显示前设置宽度
        $('.header-allnav-level3 .header-allnav-inner').on('beforeshow', function () {
            var $this = $(this);
            var $outer = $this.closest('.header-allnav-level3');
            var width = $(window).width() - 2 * 200;

            if ($this.hasClass('header-allnav-inner-product')) {
                $outer.addClass('show-product');
            } else {
                $outer.removeClass('show-product');
            }

            $outer.css('width', width);
        });

        // 二级导航显示前隐藏产品和解决方案的页内导航(提高导航z-index)
        allnavLevel2.on('beforeshow', function () {
            $header.children('.header-container').css('z-index', '999');
        }).on('afterhide', function () {
            $header.children('.header-container').css('z-index', '');
        });


        /*
         * 移动端导航下拉
         */

        //
        var $mbnav = $('.header-mbnav');
        $(document).on('click', '.header-menu-mb', function () {
            var isShow = $mbnav.hasClass('show');

            $mbnav.toggleClass('show', !isShow);
            $(this).toggleClass('show-nav', !isShow);
        });

        // 移动端导航折叠功能
        $('.header-collapse-head > a').on('click', function (event) {
            if (event.target.tagName !== 'H2') {
                event.preventDefault();
            } else if (this.href) {
                return;
            }

            var duration = 350;
            var $this = $(this);
            var $container = $this.closest('.header-collapse');
            var $body = $container.children('.header-collapse-body');
            var $content = $body.children('.header-collapse-content');
            var flag_open = $container.hasClass('open');

            if (flag_open) {
                $body.height($content.outerHeight());
                $body.height(0);
                $container.removeClass('open');
            } else {
                $container.removeClass('closed');
                $body.height($content.outerHeight());
                $container.addClass('open');
            }

            var called = false;
            $body.one(transitionEnd, function () {
                called = true;
                if (!$container.hasClass('open')) $container.addClass('closed');
                $(this).height('');
            });

            setTimeout(function () {
                if (!called) {
                    $body.trigger(transitionEnd);
                }
            }, duration);
        });

        // 鼠标在导航内滚动时，不滚动窗口
        $('.dropdown-product-wrapper-left, .dropdown-product-wrapper-right,.dropdown-common-container,.header-allnav-level>.header-allnav-inner,.header-mbnav').scrollUnique();

        /*
         * 导航搜索功能
         */
        !function () {
            var $header = $('#header');
            var $headerDrop = $('.header-dropdown');
            var $allNav = $('.header-allnav');
            var $search = $('.J-header-search');
            var $form = $search.find('.J-serach-form');
            var $input = $search.find('.J-search-input');
            var $close = $search.find('.J-search-close');
            var $drops = $search.find('.J-search-drop');
            var $dropHot = $drops.filter('.J-search-hot');
            var $dropAuto = $drops.filter('.J-search-autoword');

            var searchAddress = 'https://www.huaweicloud.com/s/';
            var debounce_search = debounce(250);

            var api = {
                hot: 'https://www.huaweicloud.com/rest/portal/v1/banner?position=hot_search_json',
                autoword: 'https://portal.huaweicloud.com/rest/portal/v1/suggest',
            };

            /* 方法 */
            var methods = {
                togglePlaceholder: function () {
                    var defaultPlaceholder = $input.attr('placeholder');
                    var activePlaceholder = $input.attr('data-active-placeholder');

                    return function (boolean) {
                        $input.attr('placeholder', boolean ? activePlaceholder : defaultPlaceholder);
                    };
                }(),
                activeSearch: function (boolean) {
                    $search.toggleClass('active', boolean);
                    if (boolean === false) {
                        if ($input.val() !== '') {
                            $input.val('').trigger('input');
                        }
                        $input.blur();
                    }
                },
                toggleDropList: function (dropName) {
                    if (dropName === 'hot') {
                        $dropHot.addClass('show');
                        $dropAuto.removeClass('show').find('a').removeClass('hover');
                    } else if (dropName === 'auto') {
                        $dropHot.removeClass('show').find('a').removeClass('hover');
                        $dropAuto.addClass('show');
                    } else if (dropName === 'none') {
                        $dropHot.removeClass('show').find('a').removeClass('hover');
                        $dropAuto.removeClass('show').find('a').removeClass('hover');
                    }
                },
                focusDropItemByKeyboard: function (direction) {
                    var $currentDrop = $drops.filter('.show');
                    var $currentItem = $currentDrop.find('a.hover');
                    var $targetItem;

                    if ($currentDrop.length === 0) {
                        return;
                    }

                    if ($currentItem.length === 0) {
                        $currentItem = $currentDrop.find('a').eq(0);
                        $currentItem.addClass('hover');
                    } else {
                        if (direction === 'up') {
                            $targetItem = $currentItem.parent().prev();
                        }
                        else if (direction === 'down') {
                            $targetItem = $currentItem.parent().next();
                        } else {
                            return;
                        }

                        $targetItem.children('a').addClass('hover');
                        $targetItem.siblings().children('a').removeClass('hover');
                    }
                },
                requestRecommend: function () {
                    var ajax = null;

                    return function (callback) {
                        if (!ajax) {
                            ajax = $.ajax({
                                url: api.hot,
                                type: 'get',
                                dataType: 'json',
                            });
                        }

                        ajax
                            .done(function (data) {
                                callback(data.map(function (item) {
                                    return item.title;
                                }));
                            })
                            .fail(function () {
                                callback([]);
                            });
                    };
                }(),
                renderRecommend: function (wordList) {
                    var html = '';

                    if (wordList && wordList.length > 0) {
                        wordList.forEach(function (word) {
                            html += '<li><a>' + word + '</a></li>';
                        });

                        $dropHot.children('ul').html(html);
                    } else {
                        $dropHot.html('');
                    }
                },
                initRecommend: function () {
                    var that = this;
                    this.requestRecommend(function (wordList) {
                        that.renderRecommend(wordList);
                    });
                },
                requestAutoword: function () {
                    var xhr;

                    return function (keyword, callback) {
                        var wordList_pages;
                        var wordList_keywords;

                        if (xhr && xhr.abort) xhr.abort();

                        if (keyword === false) return;

                        xhr = $.ajax({
                            url: api.autoword,
                            type: 'get',
                            dataType: 'jsonp',
                            data: {
                                q: keyword,
                                from: 'nav',
                            },
                            success: function (data) {
                                var result = data.result || [];

                                wordList_pages = result.filter(function (item) {
                                    return item.dataType === 99;
                                })
                                // .slice(0,2)
                                    .map(function (item) {
                                        return {
                                            text: item.text,
                                            href: item.ID,
                                        };
                                    });

                                wordList_keywords = result.filter(function (item) {
                                    return item.dataType !== 99;
                                })
                                // .slice(0,5)
                                    .map(function (item) {
                                        return item.text;
                                    });
                                callback(wordList_pages, wordList_keywords);
                            },
                            error: function () {
                                wordList_pages = [];
                                wordList_keywords = [];
                                callback(wordList_pages, wordList_keywords);
                            },
                        });
                    };
                }(),
                renderAutoword: function (keyword, wordList_pages, wordList_keywords) {
                    var html_pages = '';
                    var html_keywords = '';

                    var parseWord = function (keyword, originWord) {
                        var reg_keyword = new RegExp(keyword, 'i');
                        var is_matched = false;

                        var word = originWord.replace(reg_keyword, function (w) {
                            is_matched = true;
                            return '<span>' + w + '</span>';
                        });

                        if (!is_matched) {
                            word = '<span>' + word + '</span>';
                        }

                        return word;
                    };

                    wordList_pages.forEach(function (page) {
                        var text = parseWord(keyword, page.text);

                        html_pages += '<li class="to-page"><a href="' + page.href + '" target="_blank" bi_name="' + page.text + '_toPage">' + text + '</a></li>';
                    });

                    wordList_keywords.forEach(function (word) {
                        var text = parseWord(keyword, word);

                        html_keywords += '<li><a>' + text + '</a></li>';
                    });

                    $dropAuto.children('ul').html(html_pages + html_keywords);
                },
                setDefaultKeyword: function (keyword) {
                    $input.attr('placeholder', keyword);
                },
                initDefaultKeyword: function () {
                    var that = this;
                    this.requestRecommend(function (keywords) {
                        if (keywords && keywords.length > 0) {
                            var randomIndex = getRandomInt(0, keywords.length - 1);
                            that.setDefaultKeyword(keywords[randomIndex]);
                        }
                    });

                    function getRandomInt(minInt, maxInt) {
                        var min = minInt - 0.5,
                            max = maxInt + 0.5;

                        var random = parseInt((max - min) * Math.random() + min);

                        if (random > maxInt) random = maxInt;
                        if (random < minInt) random = minInt;

                        return random;
                    }
                },
                search: function (keyword, target) {
                    var href = searchAddress + $.base64.urlSafeEncode(keyword, true);
                    if(window.$subsitePostfix) {
                        href = href + "/" + window.$subsitePostfix;
                    }
                    if (target === '_blank') {
                        window.open(href);
                    } else {
                        location.href = href;
                    }
                },
                showDropBaseOnInput: function () {
                    var oldVal = '';
                    return function () {
                        debounce_search(function () {
                            var val = $.trim($input.val());
                            if (val === '') {
                                methods.requestAutoword(false);
                                methods.toggleDropList('hot');
                            } else {
                                if (val !== oldVal) {

                                    methods.requestAutoword(val, function (wordList_pages, wordList_keywords) {
                                        methods.renderAutoword(val, wordList_pages, wordList_keywords);
                                        methods.toggleDropList('auto');
                                    });
                                    oldVal = val;
                                } else {
                                    methods.toggleDropList('auto');
                                }
                            }
                        });
                    };
                }(),
            };

            /* 初始化热词 */
            methods.initRecommend();

            /* 初始化默认关键字 */
            // methods.initDefaultKeyword();

            /* 绑定事件*/

            $input.on('focus', function () {
                methods.togglePlaceholder(true);
            }).on('blur', function () {
                methods.togglePlaceholder(false);
            });

            // 键盘控制下拉选项
            $form.on('keydown', function (e) {
                e.stopPropagation();

                if (e.keyCode === 38 || e.keyCode === 40) {
                    e.preventDefault();
                }

                if (e.keyCode === 38) {
                    methods.focusDropItemByKeyboard('up');
                }
                else if (e.keyCode === 40) {
                    methods.focusDropItemByKeyboard('down');
                }
            });

            $input.on('keydown', function (e) {
                if (e.keyCode === 27) { // ESC
                    if ($(this).val() === '') {
                        methods.activeSearch(false);
                        methods.toggleDropList('none');
                    }
                }
            });

            $input.on('focus', function () {
                methods.activeSearch(true);
            });

            $search.on('mouseenter', function () {
                methods.activeSearch(true);
            }).on('mouseleave', function () {
                if (!$input.is(':focus')) {
                    methods.activeSearch(false);
                    methods.toggleDropList('none');
                }
            });

            $(document).on('click', function (e) {
                var $target = $(e.target);

                if ($target.closest('.header-search').length === 0) {
                    methods.activeSearch(false);
                }
            });

            $input.on('input', function () {
                var $this = $(this);
                var val = $this.val();

                $this.toggleClass('inputted', val !== '');
            });

            $close.on('click', function () {
                if ($input.val() === '') return;

                $input.val('').trigger('input').focus();
            });

            $form.on('submit', function (e) {
                e.preventDefault();

                var val = $.trim($input.val());
                var currentDropItem = $drops.filter('.show').find('a.hover');

                if (currentDropItem.length !== 0) {
                    currentDropItem.trigger('click');
                    if (currentDropItem.attr('href')) {
                        if (currentDropItem.attr('target') === '_blank') {
                            window.open(currentDropItem.attr('href'));
                        } else {
                            location.href = currentDropItem.attr('href');
                        }
                    }
                    return;
                }

                if (val !== '') {
                    methods.search(val, '_blank');
                }
            });

            $input.on('focus input click', function () {
                if (!$search.hasClass('active')) return;
                methods.showDropBaseOnInput();
            });

            // 点击搜索以外的地方收起下拉
            $(document).on('click', function (e) {
                var $target = $(e.target);

                if ($target.closest('.header-search').length === 0) {
                    methods.toggleDropList('none');
                }
            });

            // 离开当前页收起下拉
            $(window).on('blur', function () {
                methods.activeSearch(false);
                methods.toggleDropList('none');
            });

            // 展开主菜单是收起下拉
            $headerDrop.on('beforeshow', function () {
                methods.activeSearch(false);
                methods.toggleDropList('none');
            });

            // 展开“所有”菜单时收起下拉
            $allNav.on('beforeshow', function () {
                methods.activeSearch(false);
                methods.toggleDropList('none');
            });

            $drops.on('click', 'a', function (e) {
                var $this = $(this);
                var val = $.trim($this.text());
                var href = $this.attr('href');

                $input.val(val);
                methods.toggleDropList('none');

                if (!href) {
                    e.preventDefault();
                    $form.trigger('submit');
                }
            });
        }();


        /*
         * 产品下拉菜单导航功能
         */
        !function () {
            var $proNav = $('.J-product-nav');
            var largeDelay = 300;
            var smallDelay = 0;
            var proNavDebounce = debounce(largeDelay);


            /* 方法 */
            var methods = {
                tabContentByName: function (name) {
                    $('.J-product-content[data-name="' + name + '"]').addClass('show').siblings().removeClass('show');
                },
                tabNavByMenu: function ($menu) {
                    $menu.parent().addClass('active')
                        .siblings().removeClass('active');
                },
            };

            /* 添加事件 */
            $proNav.on('mouseenter', '.dropdown-product-nav-menu', function () {
                var $this = $(this);
                var delay = 0;

                if ($this.parent().hasClass('active')) return;
                if (getMoveAngle() > 60 || getMoveAngle() < -60) {
                    delay = smallDelay;
                } else {
                    delay = largeDelay;
                }

                proNavDebounce(function () {
                    methods.tabNavByMenu($this);
                    methods.tabContentByName($this.attr('data-target'));
                    // methods.setHeight($this.closest('.J-drop-product'));
                }, delay);
            }).on('mouseleave', function () {
                proNavDebounce(function () {
                }, 0);
            });

            $proNav.scrollUnique();
            onWheel($proNav, function (event) {
                event.stopPropagation();
            });
        }();

        /*
         * 产品下拉菜单搜索功能
         */
        !function () {
            $('.J-product-search-form').each(function () {
                var $form = $(this);
                var $target = $('.J-product-body[data-name="' + $form.attr('data-target') + '"]');
                var $proSearchInput = $form.find('.J-product-search-input');
                var $clearProInput = $form.find('.J-search-clear');
                var $proSearchDrop = $form.find('.J-product-search-result');
                var products = [];

                var removeRepeatProduct = function (products) {
                    var newProducts = [];
                    var hasAdds = [];

                    products.forEach(function (product) {
                        if (hasAdds.indexOf(product.name) === -1) {
                            newProducts.push(product);
                            hasAdds.push(product.name);
                        }
                    });

                    return newProducts;
                };

                products = removeRepeatProduct($target.find('.J-product-content').not('.no-search').find('.dropdown-product-content-center').find('a[href]')
                    .map(function () {
                        var $this = $(this);

                        return {
                            name: $this.text(),
                            href: $this.attr('href'),
                            keywords: $this.attr('data-keywords') ? $this.attr('data-keywords').replace(',', '') : '',
                        };
                    }).toArray());

                /* 方法 */
                var methods = {
                    renderDropList: function (list) {
                        var html = '';

                        if (list.length > 0) {
                            list.forEach(function (item, index) {
                                var activeFix = '';
                                if (index === 0) {
                                    activeFix = ' class="active"';
                                }

                                html += '<li' + activeFix + '><a href="' + item.href + '">' + item.name + '</a></li>';
                            });
                        }
                        else {
                            html = '<li class="no-result"><a>没有找到结果，请重新输入</a></li>';
                        }

                        $proSearchDrop.children('ul').html(html);
                    },
                    toggleDrop: function (boolean) {
                        $proSearchDrop.toggleClass('show', boolean);
                        if (boolean) {
                            $proSearchDrop.scrollTop(0);
                        }
                        else {
                            $proSearchDrop.children('ul').html('');
                            if ($proSearchInput.val() !== '') {
                                $proSearchInput.val('').trigger('input');
                            }
                        }
                    },
                    showDropByResult: function (result) {
                        this.renderDropList(result);
                        this.toggleDrop(true);
                    },
                    focusDropItemByKeyboard: function (direction) {
                        var $currentDrop = $proSearchDrop.filter('.show');
                        var $currentItem = $currentDrop.find('li.active');
                        var $targetItem;

                        if ($currentDrop.length === 0) {
                            return;
                        }

                        if ($currentItem.length === 0) {
                            $currentItem = $currentDrop.find('li').eq(0);
                            $currentItem.addClass('active');
                        } else {
                            if (direction === 'up') {
                                $targetItem = $currentItem.prev();
                            }
                            else if (direction === 'down') {
                                $targetItem = $currentItem.next();
                            } else {
                                return;
                            }

                            if ($targetItem.length === 0) return;

                            $targetItem.addClass('active');
                            $targetItem.siblings().removeClass('active');
                        }

                        // 滚动条
                        var scrollHeight = $currentDrop.scrollTop();
                        var dropHeight = $currentDrop.innerHeight();
                        var targetItemTop = $targetItem.position() ? $targetItem.position().top : 0;
                        var targetItemHeight = $targetItem.outerHeight();

                        if (targetItemTop < scrollHeight) {
                            $currentDrop.scrollTop(targetItemTop);
                        }
                        else if (targetItemTop + targetItemHeight > scrollHeight + dropHeight) {
                            $currentDrop.scrollTop(targetItemTop + targetItemHeight - dropHeight);
                        }

                    },
                    searchProduct: function (keyword, callback) {
                        var result = [];
                        callback = callback || function () {
                        };

                        products.forEach(function (product) {
                            if (product.name.toUpperCase().indexOf(keyword.toUpperCase()) !== -1 || product.keywords.toUpperCase().indexOf(keyword.toUpperCase()) !== -1) {
                                result.push(product);
                            }
                        });

                        callback(result);
                        return result;
                    },
                    activeSearch: function (boolean) {
                        if (boolean) {
                            $proSearchInput.focus();
                        }
                        else {
                            this.toggleDrop(false);
                            $proSearchInput.blur();
                        }
                    },
                    submit: function () {
                        var $activeResult = $proSearchDrop.find('li.active').find('a');

                        if ($activeResult.length === 0) return;

                        if ($activeResult.attr('target') === '_blank') {
                            window.open($activeResult.attr('href'));
                        } else {
                            location.href = $activeResult.attr('href');
                        }
                    },
                };

                /* 暴露方法 */
                $form.data('methods', methods);

                /* 添加事件 */
                // 键盘控制下拉选项

                $form.on('keydown', function (e) {
                    e.stopPropagation();

                    if (e.keyCode === 38 || e.keyCode === 40) {
                        e.preventDefault();
                    }

                    if (e.keyCode === 38) {
                        methods.focusDropItemByKeyboard('up');
                    }
                    else if (e.keyCode === 40) {
                        methods.focusDropItemByKeyboard('down');
                    }
                });

                // 激活输入框
                $proSearchInput.on('input', function () {
                    var $this = $(this);

                    $form.toggleClass('active', $this.val() !== '');
                });

                // 清除输入内容
                $clearProInput.click(function () {
                    if ($proSearchInput.val() === '') return;

                    $proSearchInput.val('').trigger('input').focus();
                });

                // 显示搜索结果
                $proSearchInput.on('input focus', function () {
                    var $this = $(this);
                    var val = $.trim($this.val());

                    if (val !== '') {
                        var result = methods.searchProduct(val);

                        methods.showDropByResult(result);
                    } else {
                        methods.toggleDrop(false);
                    }
                });

                // 鼠标点击其他地方关闭搜索结果
                $(document).on('click', function (e) {
                    var $target = $(e.target);

                    if ($target.closest('.J-product-search-form').length === 0) {
                        methods.toggleDrop(false);
                    }
                });
                // 提交搜索
                $form.on('submit', function (e) {
                    e.preventDefault();

                    methods.submit();
                });

                // 提交搜索
                $proSearchDrop.on('click', 'li', function () {
                    methods.submit();
                });

                // 激活下拉菜单项
                $proSearchDrop.on('mouseenter', 'li', function () {
                    var $this = $(this);

                    if ($this.hasClass('no-result')) return;

                    $this.addClass('active').siblings().removeClass('active');
                });

                // 滚动下拉时不滚动页面
                $proSearchDrop.scrollUnique();
                onWheel($proSearchDrop, function (event) {
                    event.stopPropagation();
                });
            });

            // 下拉菜单收起或切换时重置产品搜索框
            $('.header-dropdown-list>li').on('beforehide', function () {
                var methods_proSearch = $(this).find('.J-product-search-form').data('methods');

                if (methods_proSearch) {
                    methods_proSearch.activeSearch(false);
                }
            });
        }();

        /*
         * 产品推荐
         */
        !function () {
            var locationOrigin = '//www.huaweicloud.com';

            $.ajax({
                type: 'get',
                // url: 'http://10.58.118.90:8080/test/api/recommend.json',
                url: '//portal.huaweicloud.com/rest/cbcairuntimeservice/v1/recommendations',
                xhrFields: {
                    withCredentials: true,
                },
                success: function (data) {
                    if (!data || !data.recommendations) return;

                    var renderDropRecs = function (recommendations) {
                        var html_dropRecommends = recommendations.slice(0, 10).map(function (recommendation) {
                            return '<dd><a href="' + locationOrigin + recommendation.cloudServicePageLink + '"><span>' + recommendation.cloudServiceName + '</span></a></dd>';
                        }).join('');

                        var $container = $('.J-drop-recommends');

                        $container.find('dd').remove();
                        $container.append(html_dropRecommends);
                    };

                    var renderAllnavRecs = function (recommendations) {
                        var html_dropRecommends = recommendations.slice(0, 10).map(function (recommendation) {
                            return '<dd><a href="' + locationOrigin + recommendation.cloudServicePageLink + '"><span>' + recommendation.cloudServiceName + '</span></a></dd>';
                        }).join('');

                        var $container = $('.J-allnav-recommends');

                        $container.find('dd').remove();
                        $container.append(html_dropRecommends);
                    };

                    var renderMbnavRecs = function (recommendations) {
                        var html_mbnavRecommends = recommendations.slice(0, 10).map(function (recommendation) {
                            return '<li><a href="' + locationOrigin + recommendation.cloudServicePageLink + '"><span>' + recommendation.cloudServiceName + '</span></a></li>';
                        }).join('');

                        var $container = $('.J-mbnav-recommends');

                        $container.html(html_mbnavRecommends);
                    };

                    renderDropRecs(data.recommendations);
                    renderAllnavRecs(data.recommendations);
                    renderMbnavRecs(data.recommendations);

                },
            });
        }();

        /*
         * 移动端搜索框
         */
        !function () {
            var $form = $('.J-search-mb-form');
            var $input = $form.find('.J-search-mb-input');
            var $clear = $form.find('.J-search-mb-clear');
            var searchAddress = 'https://www.huaweicloud.com/s/';

            $input.on('input', function () {
                var $this = $(this);
                var val = $this.val();

                $this.toggleClass('inputted', val !== '');
            });

            $clear.on('click', function () {
                $input.val('').trigger('input').focus();
            });

            $input.on('keydown', function (e) {
                if (e.originalEvent.keyCode === 13) {
                    e.preventDefault();
                    $form.trigger('submit');
                }
            });

            $form.on('submit', function (e) {
                e.preventDefault();
                var inputVal = $input.val();

                if (inputVal === '') return;

                window.open(searchAddress + $.base64.urlSafeEncode(inputVal, true));
            });
        }();

        /*
         * 子站右侧下拉展示
         */
        /*
        !function () {
            $(".header-subsite-right-item").hover(function () {
                $(this).find(".header-subsite-right-item-menu").addClass("active");
            }, function () {
                $(this).find(".header-subsite-right-item-menu").removeClass("active");
                setTimeout(function () {
                    $(".menu-user-title").removeClass("user-title-block");
                    $(".wrapper-menu-triangle").removeClass("wrapper-menu-triangle-active");
                    $(".header-tools-list .click-more").hide();
                    $(".header-tools-list .view-more").show();
                }, 500);
            });
        }();
        */
    });
}(jQuery);

/***/ }),

/***/ "./specialcol/header/index.js":
/*!************************************!*\
  !*** ./specialcol/header/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./components/header */ "./specialcol/header/components/header.js");

/***/ }),

/***/ "./specialcol/header/index.less":
/*!**************************************!*\
  !*** ./specialcol/header/index.less ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "./specialcol/header/main.js":
/*!***********************************!*\
  !*** ./specialcol/header/main.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./index.less */ "./specialcol/header/index.less");
__webpack_require__(/*! ./index */ "./specialcol/header/index.js");


/***/ }),

/***/ "./specialcol/header/utils/onWheel.js":
/*!********************************************!*\
  !*** ./specialcol/header/utils/onWheel.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function($el, callback){
    var wheelEvent = false;

    if (document.onmousewheel !== undefined) {
        wheelEvent = 'mousewheel';
    }

    if (!wheelEvent) {
        try {
            new WheelEvent('wheel');
            wheelEvent = 'wheel';
        } catch (e) {
            console.error(e);
        }
    }

    if (!wheelEvent) {
        wheelEvent = 'DOMMouseScroll';
    }

    if (wheelEvent) {
        $el.on(wheelEvent, function(event){
            var e = event.originalEvent;
            var we = wheelEvent;
            var delta = 0;

            //Opera & IE
            if (e.detail) delta = e.detail;
            //WebKits
            else if (we === 'mousewheel') {
                delta = -e.wheelDelta;
            }
            //Old FireFox
            else if (we === 'DOMMouseScroll') delta = e.detail;
            //New FireFox
            else if (we === 'wheel') {
                delta = e.deltaY;
            }

            return callback.call(this, event, delta);
        });
    }
};


/***/ })

/******/ });
//# sourceMappingURL=index.min.js.map